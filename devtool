#!/usr/bin/env bash

# Note: If developing on windows, you might need to run this command to get rid of /r in this script file:
#   sed -i 's/\r$//' devtool
# Or make sure your git has autocrlf off: https://stackoverflow.com/questions/29045140/env-bash-r-no-such-file-or-directory

set -euo pipefail
set -x

bootstrap() {
  install_poetry
  poetry install
  local_plugin_add
}

lint() {
    # pre-commit
    echo "== Pre-commit hooks =="
    pre-commit run -v -a
    echo ""

    # flake8
    echo "== Flake8 =="
    flake8 . --config=setup.cfg
    echo ""

    # mypy
    echo "== Mypy =="
    # --namespace-packages for https://stackoverflow.com/questions/64905873/sibling-package-import-and-mypy-has-no-attribute-error
    echo y | mypy --install-types --namespace-packages --config-file setup.cfg src/ || mypy --install-types --namespace-packages --config-file setup.cfg src/
}

all() {
  lint
  echo ""
  test
  echo "All builds and tests passed! :)"
}

test() {
  PY_VERSION=$(python -c 'import sys; print(str(sys.version_info[0]) + "." + str(sys.version_info[1]))')

  # Walkthrough tests
  if [[ $PY_VERSION =~ ^3\.(9|10|11)$ ]]; then
    echo "== Python >= 3.9 Walkthrough Tests =="
    cd test && pytest --pspec test_walkthrough.py ; cd -
  elif [[ $PY_VERSION == "3.8" ]]; then
    echo "== Python 3.8 Walkthrough Tests =="
    cd test && pytest --cov-fail-under 78 --pspec py38/test_walkthrough_py38.py ; cd -
  elif [[ $PY_VERSION == "3.7" ]]; then
    echo "== Python 3.7 Walkthrough Tests =="
    cd test && pytest --cov-fail-under 78 --pspec py37/test_walkthrough_py37.py ; cd -
  else
    echo "Unsupported python version: "$PY_VERSION
    echo "test() FAILED"
    exit 1
  fi
}

# Delete old wheel files first!
local_plugin_add() {
  poetry build -f wheel
  # Calls `poetry plugin add` using the wheel file under dist/poeblix*.whl for local testing
  poetry self add $PWD/dist/poeblix*.whl
}

install_poetry() {
  if [[ $OSTYPE == 'cygwin'* ]]; then
    $((Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -)
  elif [[ $OSTYPE == 'linux-gnu'* ]] || [[ $OSTYPE == 'darwin'* ]]; then
    curl -sSL https://install.python-poetry.org | python3 -
  else
    echo "Cannot (yet) install poetry for OS "$OSTYPE
    exit 1
  fi

  # Update to latest preview version to catch errors before release candidates
  poetry self update --preview
}

uninstall_poetry() {
  # Clear pypi cache
  echo yes | poetry cache clear --all pypi || true
  echo yes | poetry cache clear --all PyPi || true
  echo yes | poetry cache clear --all _default_cache || true

  # Delete poetry global config to reset
  rm -rf ~/.config/pypoetry

  if [[ $OSTYPE == 'cygwin'* ]]; then
    $((Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python - --uninstall)
  elif [[ $OSTYPE == 'linux-gnu'* ]] || [[ $OSTYPE == 'darwin'* ]]; then
    curl -sSL https://install.python-poetry.org | python3 - --uninstall
  else
    echo "Cannot (yet) install poetry for OS "$OSTYPE
    exit 1
  fi
}

reinstall_poetry() {
  uninstall_poetry
  install_poetry
}

# Comment set +x out to show commands run
set +x
$@
